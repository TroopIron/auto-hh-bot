import aiosqlite
from aiogram import types
from typing import Optional
from aiogram.utils.keyboard import InlineKeyboardBuilder
# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ
DB_PATH = "tg_users.db"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pending ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def set_pending(tg_user: int, field: Optional[str]) -> None:
    """
    –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_user —Å–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–ª—è –ø–æ–ª—è field.
    –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ field=None.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT OR REPLACE INTO user_settings (tg_user, key, value)
            VALUES (?, 'pending', ?)
            """,
            (tg_user, field),
        )
        await db.commit()


async def get_pending(tg_user: int) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ pending-–ø–æ–ª–µ –∏–ª–∏ None."""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """
            SELECT value FROM user_settings
            WHERE tg_user = ? AND key = 'pending'
            """,
            (tg_user,),
        ) as cur:
            row = await cur.fetchone()
            return row[0] if row else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ user settings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def save_user_setting(tg_user: int, key: str, value: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ñ–∏–ª—å—Ç—Ä) –ø–æ –∫–ª—é—á—É key.
    –ü—Ä–∏–º–µ—Ä key: 'region', 'salary', 'work_format', 'employment_type', 'keyword'.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT OR REPLACE INTO user_settings (tg_user, key, value)
            VALUES (?, ?, ?)
            """,
            (tg_user, key, value),
        )
        await db.commit()


async def get_user_setting(tg_user: int, key: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É key."""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """
            SELECT value FROM user_settings
            WHERE tg_user = ? AND key = ?
            """,
            (tg_user, key),
        ) as cur:
            row = await cur.fetchone()
            return row[0] if row else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Keyboards ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_main_menu_keyboard() -> types.InlineKeyboardMarkup:
    """
    –î–≤–µ ¬´—à–∏—Ä–æ–∫–∏–µ¬ª –∫–Ω–æ–ø–∫–∏-—Ä–µ–∂–∏–º–∞ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ,
    –Ω–∏–∂–µ ‚Äì –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é 2√ó2.
    –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ aiogram-3 —á–µ—Ä–µ–∑ InlineKeyboardBuilder.
    """
    b = InlineKeyboardBuilder()

    # –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏
    b.row(
        types.InlineKeyboardButton(
            text="üöÄ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ (20)",
            callback_data="start_auto",
        )
    )
    b.row(
        types.InlineKeyboardButton(
            text="üïπ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª–∏–∫–æ–≤",
            callback_data="start_manual",
        )
    )

    # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (2 –≤ —Ä—è–¥)
    b.row(
        types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="open_settings"),
        types.InlineKeyboardButton(text="üìÑ –†–µ–∑—é–º–µ",              callback_data="open_resumes"),
    )
    b.row(
        types.InlineKeyboardButton(text="‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="open_favorites"),
        types.InlineKeyboardButton(text="üëÅÔ∏è –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã",        callback_data="show_filters"),
    )

    return b.as_markup()


def build_settings_keyboard(with_back: bool = True) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    rows = [
        [
            types.InlineKeyboardButton(text="–†–µ–≥–∏–æ–Ω",          callback_data="filter_region"),
            types.InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫",          callback_data="filter_schedule"),
        ],
        [
            types.InlineKeyboardButton(text="–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã",   callback_data="filter_work_format"),
            types.InlineKeyboardButton(text="–ó–ü",              callback_data="filter_salary"),
        ],
        [
            types.InlineKeyboardButton(text="–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",   callback_data="filter_employment_type"),
            types.InlineKeyboardButton(text="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ",  callback_data="filter_keyword"),
        ],
    ]
    if with_back:
        rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu")])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)
