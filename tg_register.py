import os
import json, random
import logging
from dotenv import load_dotenv
from urllib.parse import quote_plus
import aiosqlite
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, types
from aiogram.exceptions import TelegramBadRequest
import html
import re
import textwrap 
from settings_utils import (
    save_user_setting,
    get_user_setting,
    build_settings_keyboard,
    build_main_menu_keyboard,
    set_pending,
    get_pending,
)
from claude_client import generate_cover_letter
from resume_utils import build_resume_keyboard
import hh_api
from fastapi.responses import HTMLResponse

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TG_BOT_TOKEN not set")

bot = Bot(token=BOT_TOKEN)
app = FastAPI()

DB_PATH = "tg_users.db"
if not hasattr(app.state, "cursor"):
    app.state.cursor = {}

# ‚îÄ‚îÄ‚îÄ –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É ‚îÄ‚îÄ‚îÄ
if not hasattr(app.state, "jobs_by_id"):
    app.state.jobs_by_id = {}          # {uid: {vac_id: vacancy_dict}}

# –¥–æ–±–∞–≤–ª—è–µ–º ‚Üì
if not hasattr(app.state, "jobs_cache"):
    app.state.jobs_cache = {}          # {uid: [vacancy, ‚Ä¶]}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def get_user_token(tg_user: int) -> str | None:
    """
    –ß–∏—Ç–∞–µ–º access_token –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_tokens.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT access_token FROM user_tokens WHERE tg_user = ?",
            (tg_user,),
        ) as cur:
            row = await cur.fetchone()
            return row[0] if row else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SCHEDULE_SUGGESTIONS = ["–ø–æ–ª–Ω—ã–π –¥–µ–Ω—å", "–≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫", "—Å–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"]
WORK_FORMAT_SUGGESTIONS = ["–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ", "–æ—Ñ–∏—Å", "–≥–∏–±—Ä–∏–¥"]
EMPLOYMENT_TYPE_SUGGESTIONS = ["–ø–æ–ª–Ω–∞—è", "—á–∞—Å—Ç–∏—á–Ω–∞—è", "–ø—Ä–æ–µ–∫—Ç–Ω–∞—è", "—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞"]

MULTI_KEYS = {
    "schedule": SCHEDULE_SUGGESTIONS,
    "work_format": WORK_FORMAT_SUGGESTIONS,
    "employment_type": EMPLOYMENT_TYPE_SUGGESTIONS,
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def format_vacancy(v: dict) -> tuple[str, str | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (caption, logo_url).
    caption ‚Äî HTML-—Ç–µ–∫—Å—Ç, logo_url –º–æ–∂–µ—Ç –±—ã—Ç—å None.
    """
    title   = v["name"]
    company = v.get("employer", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    logo    = v.get("employer", {}).get("logo_urls", {}).get("240")

    # ‚îÄ salary ‚îÄ
    salary = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    if isinstance(v.get("salary"), dict):
        s   = v["salary"];  fr, to, cur = s.get("from"), s.get("to"), s.get("currency", "")
        if fr and to: salary = f"{fr}‚Äì{to} {cur}"
        elif fr:      salary = f"–æ—Ç {fr} {cur}"
        elif to:      salary = f"–¥–æ {to} {cur}"

    # ‚îÄ description ‚îÄ  (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
    snip = v.get("snippet")
    if isinstance(snip, dict):
        resp = snip.get("responsibility") or ""
        req  = snip.get("requirement") or ""
        raw  = f"{resp}\n{req}".strip()
    else:
        raw = snip or v.get("description", "") or ""

    full = strip_html(raw)
    descr = wrap_long(full[:1200]) + ("‚Ä¶" if len(full) > 1200 else "")

    caption = (
        f"üíº <b>{title}</b>\n"
        f"\nüè¢ <i>{company}</i>\n"
        f"\nüí∞ –ó–ü: {salary}\n"
        f"\n{descr}\n"
        f"\n<a href='{v['url']}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ hh.ru</a>"
    )
    return caption, logo

async def get_resume_summary(uid: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ (–¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ)."""
    rid = await get_user_setting(uid, "resume")
    if not rid:
        return ""
    token = await get_user_token(uid)
    client = hh_api.HHApiClient(token) if token else hh_api.HHApiClient()
    txt = await client.get_resume_text(rid)          # —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –º–µ—Ç–æ–¥
    return txt[:1200]                                # –ª–∏—à–Ω–µ–µ –æ–±—Ä–µ–∂–µ–º


async def send_apply(uid: int, vacancy_id: str, cover_letter: str) -> None:
    """
    –®–ª—ë—Ç –æ—Ç–∫–ª–∏–∫ + —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤ HH.
    """
    token = await get_user_token(uid)
    resume_id = await get_user_setting(uid, "resume")
    if not resume_id:
        raise RuntimeError("–†–µ–∑—é–º–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")

    client = hh_api.HHApiClient(token) if token else hh_api.HHApiClient()
    await client.respond_to_vacancy(
        vacancy_id=vacancy_id,
        resume_id=resume_id,
        cover_letter=cover_letter,
    )


def build_job_kb(vac_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"job_apply_{str(vac_id)}"
                ),
                types.InlineKeyboardButton(
                    text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"job_fav_{vac_id}"
                ),
            ],
            [
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="job_prev"),
                types.InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",  callback_data="job_next"),
            ],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="back_menu")],
        ]
    )


async def run_jobs(uid: int) -> None:
    """
    –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /jobs –≤—ã–Ω–µ—Å–µ–Ω–∞ —Å—é–¥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ
    –∑–∞–ø—É—Å–∫–∞—Ç—å –µ—ë –∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –∏–∑ callback-–∫–Ω–æ–ø–∫–∏.
    """
    token  = await get_user_token(uid)
    client = hh_api.HHApiClient(token) if token else hh_api.HHApiClient()

    page = await next_jobs_page(uid)            # —Å—á—ë—Ç—á–∏–∫ 0‚Äì19
    keyword = await get_user_setting(uid, "keyword") or ""

    params = {"text": keyword, "per_page": 20, "page": page}
    resp   = await client._client.get(f"{client.BASE_URL}/vacancies", params=params)
    resp.raise_for_status()
    raw_vacs = resp.json().get("items", [])

    if not raw_vacs:
        await bot.send_message(uid, "–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
        return

    vacancies: list[dict] = []
    for v in raw_vacs:
        resp_txt = v.get("snippet", {}).get("responsibility") or ""
        req_txt  = v.get("snippet", {}).get("requirement")      or ""
        full_descr = strip_html(f"{resp_txt}\n{req_txt}".strip()) or "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        vacancies.append({
            "id":       v["id"],
            "name":     v["name"],
            "url":      v["alternate_url"],
            "salary":   v.get("salary"),
            "employer": v.get("employer"),
            "snippet":  (full_descr[:1200] + "‚Ä¶") if len(full_descr) > 1200 else full_descr,
        })

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_jobs
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO pending_jobs(tg_user, jobs_json, cursor)
            VALUES(?, ?, 0)
            ON CONFLICT(tg_user) DO UPDATE
            SET jobs_json = excluded.jobs_json,
                cursor     = 0
            """,
            (uid, json.dumps(vacancies)),
        )
        await db.commit()

    # –¥–µ—Ä–∂–∏–º –∫–æ–ø–∏—é –≤ RAM
    app.state.jobs_cache = getattr(app.state, "jobs_cache", {})
    app.state.jobs_cache[uid] = vacancies          # —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ (–º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)

    app.state.jobs_by_id = getattr(app.state, "jobs_by_id", {})
    app.state.jobs_by_id[uid] = {
        str(v["id"]): v          # '123456'
        for v in vacancies
    } | {
        int(v["id"]): v          # 123456   (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ id –±—É–¥–µ—Ç int)
        for v in vacancies
    }   # ‚Üê –Ω–æ–≤—ã–π dict

    app.state.cursor.setdefault(uid, {})["jobs"] = 0

    # –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    first = vacancies[0]
    caption, logo = format_vacancy(first)
    kb_first = build_job_kb(first["id"])

    if logo:
        await bot.send_photo(uid, logo, caption=caption, parse_mode="HTML", reply_markup=kb_first)
    else:
        await bot.send_message(uid, caption, parse_mode="HTML", reply_markup=kb_first)


def build_fav_kb(fid: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"fav_del_{fid}",
                ),
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data="fav_prev",
                ),
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                    callback_data="fav_next",
                ),
            ],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="back_menu")],
        ]
    )

def strip_html(text: str) -> str:
    """–û—á–µ–Ω—å –≥—Ä—É–±–æ —É–±–∏—Ä–∞–µ—Ç —Ç–µ–≥–∏, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ—Ä–µ–∑–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return re.sub(r"<[^>]+>", "", text or "")

def wrap_long(text: str, width: int = 60) -> str:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∏—Å—å –≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É."""
    return "\n".join(textwrap.wrap(text, width=width))

def build_inline_suggestions(
    values: list[str],
    prefix: str,
    selected: set[str] | None = None,
    with_back: bool = False,
):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É‚Äë–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫; –æ—Ç–º–µ—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–µ–∫‚Äë–º–∞—Ä–∫."""
    selected = selected or set()
    rows = [
        [
            types.InlineKeyboardButton(
                text=("‚úÖ " if v in selected else "") + v,
                callback_data=f"{prefix}_{v}",
            )
        ]
        for v in values
    ]
    if with_back:
        rows.append([
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_settings"
            )
        ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


async def toggle_multi_value(user_id: int, key: str, value: str) -> set[str]:
    curr = await get_user_setting(user_id, key) or ""
    items = {v.strip() for v in curr.split(",") if v.strip()}
    if value in items:
        items.remove(value)
    else:
        items.add(value)
    await save_user_setting(user_id, key, ",".join(items))
    return items

async def next_jobs_page(uid: int) -> int:
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ page –¥–ª—è /jobs –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –ö–æ–≥–¥–∞ –¥–æ–π–¥—ë–º –¥–æ 20-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.
    """
    curr = int(await get_user_setting(uid, "jobs_page") or 0)
    new  = curr + 1 if curr < 19 else 0
    await save_user_setting(uid, "jobs_page", str(new))
    return curr

async def build_filters_summary(uid: int) -> str:
    def esc(v):
        return html.escape(str(v)) if v else "‚Äî"

    region_raw = await get_user_setting(uid, "region")
    region = esc(await hh_api.area_name(region_raw))
    salary = esc(await get_user_setting(uid, "salary") or "‚Äî")
    schedule = esc(await get_user_setting(uid, "schedule") or "‚Äî")
    work_fmt = esc(await get_user_setting(uid, "work_format") or "‚Äî")
    employ = esc(await get_user_setting(uid, "employment_type") or "‚Äî")
    keyword = esc(await get_user_setting(uid, "keyword") or "‚Äî")

    return (
    "<b>üìã –í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã</b>\n"
    f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}\n"
    f"‚Ä¢ –ó–ü ‚â• {salary}\n"
    f"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫: {schedule}\n"
    f"‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_fmt}\n"
    f"‚Ä¢ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {employ}\n"
    f"‚Ä¢ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}"
)


def build_oauth_url(tg_user: int) -> str:
    rid = os.getenv("REDIRECT_URI")
    return (
        "https://hh.ru/oauth/authorize?"
        f"response_type=code&client_id={os.getenv('HH_CLIENT_ID')}"
        f"&redirect_uri={quote_plus(rid, safe='')}"
        f"&state={tg_user}"
    )


async def safe_edit_markup(message: types.Message, markup: types.InlineKeyboardMarkup | None = None):
    """–û–±–Ω–æ–≤–∏—Ç—å reply_markup; –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å BadRequest, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å."""
    try:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=markup,
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


async def safe_edit_text(
    message: types.Message,
    text: str,
    markup: types.InlineKeyboardMarkup | None,
    html: bool = False,
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=markup,
            parse_mode="HTML" if html else None,
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


async def safe_edit_media(
    message: types.Message,
    photo_url: str,
    caption: str,
    markup: types.InlineKeyboardMarkup,
):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å, –ª–æ–≤–∏–º ¬´message is not modified¬ª.
    –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äì –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ.
    """
    try:
        media = types.InputMediaPhoto(media=photo_url, caption=caption, parse_mode="HTML")
        await bot.edit_message_media(
            media=media,
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=markup,
        )
    except TelegramBadRequest as e:
        err = str(e)
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —ç—Ç–æ –±—ã–ª–æ text-message, –ø—Ä–æ–±—É–µ–º edit_text
        if "message is not modified" in err:
            await safe_edit_text(message, caption, markup, html=True)
        elif "type of file" in err or "message content is not modified" in err:
            # —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ñ–æ—Ç–æ ‚Äì —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.send_photo(
                message.chat.id,
                photo_url,
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )
        else:
            raise



async def get_settings_msg_id(uid: int) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π msg_id —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            async with db.execute(
                "SELECT settings_msg_id FROM users WHERE chat_id = ?",
                (uid,),
            ) as cur:
                row = await cur.fetchone()
                return row[0] if row else None
        except aiosqlite.OperationalError as e:
            if "no such column" in str(e).lower():
                await db.execute(
                    "ALTER TABLE users ADD COLUMN settings_msg_id INTEGER"
                )
                await db.commit()
                return None
            raise


async def set_settings_msg_id(uid: int, msg_id: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç msg_id —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute(
                "UPDATE users SET settings_msg_id = ? WHERE chat_id = ?",
                (msg_id, uid),
            )
        except aiosqlite.OperationalError as e:
            if "no such column" in str(e).lower():
                await db.execute(
                    "ALTER TABLE users ADD COLUMN settings_msg_id INTEGER"
                )
                await db.execute(
                    "UPDATE users SET settings_msg_id = ? WHERE chat_id = ?",
                    (msg_id, uid),
                )
        await db.commit()


async def safe_edit_text_by_id(
    uid: int,
    msg_id: int | None,
    text: str,
    markup: types.InlineKeyboardMarkup | None,
    html: bool = False,
):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ id, –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if msg_id is None:
        new_msg = await bot.send_message(uid, text, reply_markup=markup)
        await set_settings_msg_id(uid, new_msg.message_id)
        return
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=uid,
            message_id=msg_id,
            reply_markup=markup,
            parse_mode="HTML" if html else None,
        )
    except TelegramBadRequest as e:
        err = str(e).lower()
        if "message to edit not found" in err:
            new_msg = await bot.send_message(uid, text, reply_markup=markup)
            await set_settings_msg_id(uid, new_msg.message_id)
        elif "message is not modified" not in err:
            raise

async def show_prev_job(call: types.CallbackQuery, uid: int):
    jobs   = app.state.jobs_cache.get(uid, [])
    cursor = app.state.cursor.get(uid, {}).get("jobs", 0)

    if cursor > 0:
        cursor -= 1
    app.state.cursor.setdefault(uid, {})["jobs"] = cursor

    if not jobs:
        await bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return {"ok": True}

    job = jobs[cursor]
    kb  = build_job_kb(job["id"])          # helper –∏–∑ –ø. 1-–±
    text, logo = format_vacancy(job)

    if logo:
        await safe_edit_media(call.message, logo, text, kb)
    else:
        await safe_edit_text(call.message, text, kb, html=True)

    await bot.answer_callback_query(call.id)
    return {"ok": True}

async def show_prev_fav(call: types.CallbackQuery, uid: int):
    favs   = app.state.favs_cache.get(uid, [])
    cursor = app.state.cursor.get(uid, {}).get("favs", 0)

    if cursor > 0:
        cursor -= 1
    app.state.cursor.setdefault(uid, {})["favs"] = cursor

    if not favs:
        await bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return {"ok": True}

    fid, title, url = favs[cursor]
    kb = build_fav_kb(fid)                 # –≤—ã–Ω–µ—Å–∏ –∫–ª–∞–≤—É –≤ helper, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    text = f"‚≠êÔ∏è <b>{html.escape(title)}</b>\n<a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ hh.ru</a>"
    await safe_edit_text(call.message, text, kb, html=True)
    await bot.answer_callback_query(call.id)
    return {"ok": True}

async def show_next_fav(call: types.CallbackQuery, uid: int) -> dict:
    # –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–µ—à–∞ –∏ —Å–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä
    favs = getattr(app.state, "favs_cache", {}).get(uid, [])
    if favs:
        favs.pop(0)                 # —É–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É

    # –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if not favs:
        await safe_edit_text(call.message, "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.", None)
        await bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚úÖ")
        app.state.favs_cache.pop(uid, None)
        return {"ok": True}

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    app.state.favs_cache[uid] = favs          # –æ–±–Ω–æ–≤–∏–ª–∏ –∫–µ—à
    fid, title, url = favs[0]

    text = (
        f"‚≠êÔ∏è <b>{html.escape(title)}</b>\n"
        f"<a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ hh.ru</a>"
    )
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å",     callback_data=f"fav_del_{fid}"),
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="fav_prev"),
                types.InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="fav_next"),  
            ],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")],
        ]
    )
    await safe_edit_text(call.message, text, kb, html=True)
    await bot.answer_callback_query(call.id)
    return {"ok": True}



async def safe_delete(message: types.Message) -> None:
    "–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —Ä–æ–Ω—è—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."
    try:
        await message.delete()
    except TelegramBadRequest:
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 48 —á
        pass
    except Exception:
        pass


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI lifecycle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.on_event("startup")
async def _startup():
    webhook = os.getenv("WEBHOOK_URL")
    if webhook:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook)
        logger.info("Webhook set: %s", webhook)


@app.on_event("shutdown")
async def _shutdown():
    await bot.session.close()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main webhook ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.post("/bot{token:path}")
async def telegram_webhook(request: Request, token: str):
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Invalid token")

    update = types.Update(**await request.json())

    # ===== CALLBACKS =====
    if update.callback_query:
        call = update.callback_query
        uid = call.from_user.id
        data = call.data

        # ensure user row exists
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT OR IGNORE INTO users(chat_id) VALUES (?)", (uid,))
            await db.commit()

        # === –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
        if data == "back_menu":
            # —É–±–∏—Ä–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É–¥–∞–ª–∏–ª–∏)
            try:
                await bot.delete_message(uid, call.message.message_id)
            except TelegramBadRequest:
                pass

            smsg = await get_settings_msg_id(uid)
            await safe_edit_text_by_id(
                uid, smsg, "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", build_main_menu_keyboard()
            )
            await bot.answer_callback_query(call.id)
            return {"ok": True}


         # ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫–æ–≤ (20 —à—Ç—É–∫) ‚îÄ‚îÄ‚îÄ
        if data == "start_auto":
            await bot.answer_callback_query(call.id)

            # –±–µ—Ä—ë–º —Å–≤–µ–∂–∏–µ 20 –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π fetch –≤ run_jobs
            vacancies = await fetch_vacancies(uid)      # —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ run_jobs
            resume = await get_resume_summary(uid)

            sent = 0
            for v in vacancies[:20]:
                cover = await generate_cover_letter(v["snippet"] or v["name"], resume)
                try:
                    await send_apply(uid, v["id"], cover)
                    sent += 1
                except Exception as e:
                    logger.warning("fail apply %s: %s", v["id"], e)

            await bot.send_message(uid, f"üöÄ –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent}/20")
            return {"ok": True}

        # ‚îÄ‚îÄ‚îÄ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º /jobs –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚îÄ‚îÄ‚îÄ
        if data == "start_manual":
            await bot.answer_callback_query(call.id)
            await run_jobs(uid)          # —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å
            return {"ok": True}
            
        # === –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
        if data == "open_settings":
            smsg = await get_settings_msg_id(uid)
            await safe_edit_text_by_id(uid, smsg, "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", build_settings_keyboard())
            await bot.answer_callback_query(call.id)
            return {"ok": True}

        # === –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—é–º–µ ===
        if data == "open_resumes":
            kb = await build_resume_keyboard(uid)
            await safe_edit_text(
                call.message,
                "üìÑ –í–∞—à–∏ —Ä–µ–∑—é–º–µ:",
                kb,
            )
            return {"ok": True}

        # === –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ===
        if data == "open_favorites":
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute(
                    "SELECT vacancy_id, title, url FROM user_favorites "
                    "WHERE tg_user = ? ORDER BY rowid DESC",
                    (uid,),
                ) as cur:
                    favs = await cur.fetchall()

            if not favs:
                await bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üôÇ", show_alert=True)
                return {"ok": True}

            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–∞–∫ –≤ /jobs
            fid, title, url = favs[0]
            text = f"‚≠êÔ∏è <b>{html.escape(title)}</b>\n<a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ hh.ru</a>"

            kb_fav = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å",   callback_data=f"fav_del_{fid}"),
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="fav_prev"),
                        types.InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="fav_next"),     
                    ],
                    [
                        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",     callback_data="back_menu"),
                    ],
                ]
            )

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.delete_message(uid, call.message.message_id)
            await bot.send_message(uid, text, reply_markup=kb_fav, parse_mode="HTML")
            await bot.answer_callback_query(call.id)
            # –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–ª–∞–¥—ë–º favs –≤ RAM-—Å–ª–æ–≤–∞—Ä—å (–∫–ª—é—á = uid)
            app.state.favs_cache = getattr(app.state, "favs_cache", {})
            app.state.favs_cache[uid] = favs
            return {"ok": True}

            
        # ---------- –ª–∏—Å—Ç–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ----------  <-- –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        elif data == "fav_prev":
            return await show_prev_fav(call, uid)

        elif data == "fav_next":
            return await show_next_fav(call, uid)

        elif data.startswith("fav_del_"):
            fid = int(data.split("_")[-1])
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "DELETE FROM user_favorites WHERE tg_user = ? AND vacancy_id = ?",
                    (uid, fid),
                )
                await db.commit()

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
            favs = getattr(app.state, "favs_cache", {}).get(uid, [])
            favs = [f for f in favs if f[0] != fid]
            app.state.favs_cache[uid] = favs
            await bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ")
            return await show_next_fav(call, uid)
        
        # ---------- fav_del_<id> ----------
        if data.startswith("fav_del_"):
            fid = int(data.split("_")[-1])
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "DELETE FROM user_favorites WHERE tg_user = ? AND vacancy_id = ?",
                    (uid, fid),
                )
                await db.commit()

            # —É–±–∏—Ä–∞–µ–º –∏–∑ –∫–µ—à–∞ –∏ –∂–º—ë–º fav_next, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ
            favs = getattr(app.state, "favs_cache", {}).get(uid, [])
            favs = [f for f in favs if f[0] != fid]
            app.state.favs_cache[uid] = favs
            await bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ")
            return await show_next_fav(call, uid)

        if data == "show_filters":
            summary = await build_filters_summary(uid)
            await safe_edit_text(
                call.message,
                summary,
                types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu"
                            )
                        ]
                    ]
                ),
                html=True,
            )
            await bot.answer_callback_query(call.id)
            return {"ok": True}

        if data == "back_settings":
            smsg = await get_settings_msg_id(uid)
            await safe_edit_text_by_id(
                uid,
                smsg,
                "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:",
                build_settings_keyboard(),
            )
            await bot.answer_callback_query(call.id)
            return {"ok": True}


        # ---------- –∑–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ----------
        if data.startswith("filter_"):
            fkey = data.split("_", 1)[1]

            if fkey == "region":
                await set_pending(uid, "region")
                await safe_edit_text(call.message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:", None)
                return {"ok": True}

            if fkey == "salary":
                await set_pending(uid, "salary")
                await safe_edit_text(call.message, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (—á–∏—Å–ª–æ):", None)
                return {"ok": True}

            if fkey == "keyword":
                await set_pending(uid, "keyword")
                await safe_edit_text(call.message, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:", None)
                return {"ok": True}

            if fkey in MULTI_KEYS:
                selection = await get_user_setting(uid, fkey) or ""
                sel_set = {i.strip() for i in selection.split(",") if i.strip()}
                await safe_edit_text(
                    call.message,
                    f"–í—ã–±–µ—Ä–∏—Ç–µ {fkey.replace('_', ' ')} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                    build_inline_suggestions(
                        MULTI_KEYS[fkey], f"{fkey}_suggest", sel_set, with_back=True
                    ),
                )
                return {"ok": True}

        # ---------- –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä ----------
        for m in MULTI_KEYS:
            prefix = f"{m}_suggest_"
            if data.startswith(prefix):
                val = data[len(prefix):]
                sel_set = await toggle_multi_value(uid, m, val)
                await safe_edit_markup(
                    call.message,
                    build_inline_suggestions(
                        MULTI_KEYS[m], f"{m}_suggest", sel_set, with_back=True
                    ),
                )
                await bot(call.answer("‚úì"))
                return {"ok": True}


        # ---------- region –∏–∑ suggestions ----------
        if data.startswith("region_suggest_"):
            area_id = int(data.split("_")[-1])
            await save_user_setting(uid, "region", area_id)
            await safe_edit_markup(call.message, None)
            await bot(call.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ"))
            return {"ok": True}

        # ---------- –≤—ã–±–æ—Ä —Ä–µ–∑—é–º–µ ----------
        if data.startswith("select_resume_"):
            rid = data.split("_")[-1]
            await save_user_setting(uid, "resume", rid)
            await bot(call.answer("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"))
            return {"ok": True}
        
        if data == "find_jobs":
            await bot.answer_callback_query(call.id)
            await bot.send_message(uid,
                "–û–∫–µ–π! –ù–∞–∂–º–∏—Ç–µ /jobs, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            return {"ok": True}

                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        if data == "job_prev":
            return await show_prev_job(call, uid)

        if data == "job_next":
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute(
                    "SELECT jobs_json, cursor FROM pending_jobs WHERE tg_user = ?",
                    (uid,),
                ) as cur:
                    row = await cur.fetchone()

                if not row:
                    await bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
                    return {"ok": True}

                jobs, cursor = json.loads(row[0]), row[1] + 1
                app.state.cursor.setdefault(uid, {})["jobs"] = cursor

                # ----- –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ -----
                if cursor >= len(jobs):
                    await bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚úÖ")
                    await safe_edit_markup(call.message, None)
                    await db.execute(
                        "DELETE FROM pending_jobs WHERE tg_user = ?",
                        (uid,),
                    )
                    await db.commit()
                    return {"ok": True}

                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π cursor
                await db.execute(
                    "UPDATE pending_jobs SET cursor = ? WHERE tg_user = ?",
                    (cursor, uid),
                )
                await db.commit()

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            while cursor < len(jobs) and not isinstance(jobs[cursor], dict):
                cursor += 1

            # –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            if cursor >= len(jobs):
                await bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚úÖ")
                await safe_edit_markup(call.message, None)
                async with aiosqlite.connect(DB_PATH) as db:
                    await db.execute("DELETE FROM pending_jobs WHERE tg_user = ?", (uid,))
                    await db.commit()
                return {"ok": True}

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π cursor
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "UPDATE pending_jobs SET cursor = ? WHERE tg_user = ?",
                    (cursor, uid),
                )
                await db.commit()
            app.state.cursor.setdefault(uid, {})["jobs"] = cursor

            job = jobs[cursor]                       # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ dict
            caption, logo = format_vacancy(job)      # —Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

            kb_next = build_job_kb(job["id"])

            # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await bot.delete_message(uid, call.message.message_id)
            if logo:
                await bot.send_photo(
                    uid,
                    logo,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=kb_next,
                )
            else:
                await bot.send_message(
                    uid,
                    caption,
                    parse_mode="HTML",
                    reply_markup=kb_next,
                )

            await bot.answer_callback_query(call.id)
            return {"ok": True}



        if data.startswith("job_apply_"):
            vac_id = data.split("_")[-1]

            # –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ jobs_cache
            store = getattr(app.state, "jobs_by_id", {}).get(uid, {})
            job = store.get(vac_id)

            # –∑–∞–ø–∞—Å–Ω–æ–π –æ–±—Ö–æ–¥ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç–æ–π
            if not job:
                for j in getattr(app.state, "jobs_cache", {}).get(uid, []):
                    if str(j["id"]) == vac_id:
                        job = j
                        break

            if not job:                                   # –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏
                await bot.answer_callback_query(call.id, "‚õîÔ∏è –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {"ok": True}

            vacancy_text = job["snippet"] or job["name"]

            resume_text = await get_resume_summary(uid)
            cover = await generate_cover_letter(vacancy_text, resume_text)

            await send_apply(uid, vac_id, cover)
            await bot.answer_callback_query(call.id, "üîî –û—Ç–∫–ª–∏–∫ + –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return {"ok": True}


        if data.startswith("job_fav_"):
            vac_id = int(data.split("_")[-1])

            # --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –±–µ—Ä—ë–º HTML-—Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (text –∏–ª–∏ caption)
            content_html = (
                getattr(call.message, "html_text", None)
                or getattr(call.message, "caption_html", None)
                or call.message.text
                or call.message.caption
                or ""
            )
            title = content_html.split("\n")[0].replace("<b>", "").replace("</b>", "")

            # —Å—Å—ã–ª–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ entities –ò–õ–ò caption_entities
            entities = call.message.entities or call.message.caption_entities or []
            url_ent  = next((e for e in entities if e.type == "text_link"), None)

            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    """
                    INSERT OR IGNORE INTO user_favorites(tg_user, vacancy_id, title, url)
                    VALUES(?, ?, ?, ?)
                    """,
                    (uid, vac_id, title, url_ent.url if url_ent else "")
                )
                await db.commit()

            await bot.answer_callback_query(call.id, "‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            return {"ok": True}


    # ===== TEXT =====
    if update.message and update.message.text:
        msg = update.message
        uid = msg.from_user.id
        text = msg.text.strip()
        pending = await get_pending(uid)

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT OR IGNORE INTO users(chat_id) VALUES (?)", (uid,))
            await db.commit()

        try:
            # ---------- commands ----------
            if text.startswith("/"):
                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if text == "/start":
                    await set_pending(uid, None)

                    intro = (
                        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ hh.ru –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º. "
                        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥–∏–æ–Ω, –∑–∞—Ä–ø–ª–∞—Ç—É, –≥—Ä–∞—Ñ–∏–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è —Å–¥–µ–ª–∞—é —Å–∞–º."
                    )

                    token = await get_user_token(uid)
                    if token is None:
                        # –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É OAuth
                        kb = types.InlineKeyboardMarkup(
                            inline_keyboard=[[types.InlineKeyboardButton(
                                text="üöÄ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏", url=build_oauth_url(uid)
                            )]]
                        )
                        await bot.send_message(
                            uid,
                            intro
                            + "\n\n<b>–®–∞–≥ 1.</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –¥–∞–π—Ç–µ –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É hh.ru.",
                            reply_markup=kb,
                            parse_mode="HTML",
                        )
                        return {"ok": True}

                    # —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω ‚Äî —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é
                    menu_msg = await bot.send_message(
                        uid,
                        f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n{intro}",
                        reply_markup=build_main_menu_keyboard(),
                        parse_mode="HTML",
                    )
                    await set_settings_msg_id(uid, menu_msg.message_id)
                    return {"ok": True}

                                 # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /jobs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /jobs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if text == "/jobs":
                    await set_pending(uid, None)
                    await run_jobs(uid)
                    return {"ok": True}


                # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /menu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if text == "/menu":
                    await set_pending(uid, None)
                    menu_msg = await bot.send_message(
                        uid,
                        "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=build_main_menu_keyboard(),
                    )
                    await set_settings_msg_id(uid, menu_msg.message_id)
                    return {"ok": True}

                if text == "/settings":
                    await set_pending(uid, None)
                    msg = await bot.send_message(
                        uid, "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=build_settings_keyboard()
                    )
                    await set_settings_msg_id(uid, msg.message_id)
                    return {"ok": True}

            if pending == "region":
                await save_user_setting(uid, "region", text)
                await set_pending(uid, None)
                msg_id = await get_settings_msg_id(uid)
                await safe_edit_text_by_id(
                    uid, msg_id, "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", build_settings_keyboard()
                )
                return {"ok": True}

            if pending == "salary" and text.isdigit():
                await save_user_setting(uid, "salary", text)
                await set_pending(uid, None)
                msg_id = await get_settings_msg_id(uid)
                await safe_edit_text_by_id(
                    uid, msg_id, "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", build_settings_keyboard()
                )
                return {"ok": True}

            if pending == "keyword":
                await save_user_setting(uid, "keyword", text)
                await set_pending(uid, None)
                msg_id = await get_settings_msg_id(uid)
                await safe_edit_text_by_id(
                    uid, msg_id, "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", build_settings_keyboard()
                )
                return {"ok": True}
        finally:
            if pending:
                await safe_delete(msg)